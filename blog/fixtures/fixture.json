[
  {
    "model": "auth.user",
    "pk": 1,
    "fields": {
      "password": "pbkdf2_sha256$30000$wyctac5zlifT$T+zrJ0ANgeLTX7FZAzCnAVC2rI0G1XpiSsFLkZt/UHI=",
      "last_login": "2017-03-07T14:00:53.362Z",
      "is_superuser": true,
      "username": "michael",
      "first_name": "",
      "last_name": "",
      "email": "mihpavlov@gmail.com",
      "is_staff": true,
      "is_active": true,
      "date_joined": "2017-03-07T12:43:54.704Z",
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "auth.user",
    "pk": 2,
    "fields": {
      "password": "pbkdf2_sha256$30000$22PU7IKy7z7O$/KL6ECalUek4SlwUmRqX47vbaVx7o9pJ4TM/0t6IP9c=",
      "last_login": "2017-03-07T13:08:11.640Z",
      "is_superuser": false,
      "username": "demo",
      "first_name": "",
      "last_name": "",
      "email": "",
      "is_staff": false,
      "is_active": true,
      "date_joined": "2017-03-07T12:49:53.693Z",
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "auth.user",
    "pk": 3,
    "fields": {
      "password": "pbkdf2_sha256$30000$zeFe4syAkfaN$F6c2VKybKR6aYvGjTDvQPB/LiuhI3dlV67CUold7aDY=",
      "last_login": "2017-03-07T14:11:39.912Z",
      "is_superuser": false,
      "username": "mars",
      "first_name": "",
      "last_name": "",
      "email": "",
      "is_staff": false,
      "is_active": true,
      "date_joined": "2017-03-07T12:50:10.097Z",
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "blog.profile",
    "pk": 1,
    "fields": {
      "user": 1
    }
  },
  {
    "model": "blog.profile",
    "pk": 2,
    "fields": {
      "user": 2
    }
  },
  {
    "model": "blog.profile",
    "pk": 3,
    "fields": {
      "user": 3
    }
  },
  {
    "model": "blog.post",
    "pk": 1,
    "fields": {
      "timestamp": "2017-03-07T12:58:40.191Z",
      "title": "This is the behaviour to adopt when the referenced object is deleted. It is not specific to django, this is an SQL standard.",
      "content": "There are 6 possible actions to take when such event occurs:\r\n\r\n    CASCADE: When the referenced object is deleted, also delete the objects that have references to it (When you remove a blog post for instance, you might want to delete comments as well). SQL equivalent: CASCADE.\r\n    PROTECT: Forbid the deletion of the referenced object. To delete it you will have to delete all objects that reference it manually. SQL equivalent: RESTRICT.\r\n    SET_NULL: Set the reference to NULL (requires the field to be nullable). For instance, when you delete a User, you might want to keep the comments he posted on blog posts, but say it was posted by an anonymous (or deleted) user. SQL equivalent: SET NULL.\r\n    SET_DEFAULT: Set the default value. SQL equivalent: SET DEFAULT.\r\n    SET(...): Set a given value. This one is not part of the SQL standard and is entirely handled by Django.\r\n    DO_NOTHING: Probably a very bad idea since this would create integrity issues in your database (referencing an object that actually doesn't exist). SQL equivalent: NO ACTION.\r\n\r\nSource: Django documentation\r\n\r\nSee also the documentation of PostGreSQL for instance.\r\n\r\nIn most cases, CASCADE is the expected behaviour, but for every ForeignKey, you should always ask yourself what is the expected behaviour in this situation. PROTECT and SET_NULL are often useful. Setting CASCADE where it should not, can potentially delete all your database in cascade, by simply deleting a single user.",
      "user": 1
    }
  },
  {
    "model": "blog.post",
    "pk": 2,
    "fields": {
      "timestamp": "2017-03-07T12:59:00.820Z",
      "title": "The on_delete method is used to tell",
      "content": "The on_delete method is used to tell Django what to do with model instances that depend on the model instance you delete. (e.g. a ForeignKey relationship). The on_delete=models.CASCADE tells Django to cascade the deleting effect i.e. continue deleting the dependent models as well.\r\n\r\nHere's a more concrete example. Assume you have an Author model that is a ForeignKey in a Book model. Now, if you delete an instance of the Author model, Django would not know what to do with instances of the Book model that depend on that instance of Author model. The on_delete method tells Django what to do in that case. Setting on_delete=models.CASCADE will instruct Django to cascade the deleting effect i.e. delete all the Book model instances that depend on the Author model instance you deleted.\r\n\r\nNote: on_delete will become a required argument in Django 2.0. In older versions it defaults to CASCADE.",
      "user": 1
    }
  },
  {
    "model": "blog.post",
    "pk": 3,
    "fields": {
      "timestamp": "2017-03-07T12:59:58.004Z",
      "title": "ForeignKey accepts other arguments that define the details of how the relation works.",
      "content": "When an object referenced by a ForeignKey is deleted, Django will emulate the behavior of the SQL constraint specified by the on_delete argument. For example, if you have a nullable ForeignKey and you want it to be set null when the referenced object is deleted:\r\n\r\n    user = models.ForeignKey(\r\n        User,\r\n        models.SET_NULL,\r\n        blank=True,\r\n        null=True,\r\n    )\r\n\r\n    Deprecated since version 1.9: on_delete will become a required argument in Django 2.0. In older versions it defaults to CASCADE.\r\n\r\nThe possible values for on_delete are found in django.db.models:",
      "user": 3
    }
  },
  {
    "model": "blog.post",
    "pk": 4,
    "fields": {
      "timestamp": "2017-03-07T13:00:50.543Z",
      "title": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u00ab\u0444\u043e\u043d\u0442\u0430\u043d \u0414\u041d\u041a\u00bb \u0441 \u0440\u0435\u043a\u043e\u0440\u0434\u043d\u043e\u0439 \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u2013 215 \u043f\u0435\u0442\u0430\u0431\u0430\u0439\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0434\u043d\u043e\u043c \u0433\u0440\u0430\u043c\u043c\u0435 \u0414\u041d\u041a",
      "content": "\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0447\u0435\u043d\u044b\u0445 \u0438\u0437 \u041a\u043e\u043b\u0443\u043c\u0431\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430 \u0438 \u041d\u044c\u044e-\u0419\u043e\u0440\u043a\u0441\u043a\u043e\u0433\u043e \u0446\u0435\u043d\u0442\u0440\u0430 \u0433\u0435\u043d\u043e\u043c\u0430 (NYGC) \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438, \u0447\u0442\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432\u0438\u0434\u0435\u043e \u043d\u0430 \u0441\u043c\u0430\u0440\u0442\u0444\u043e\u043d\u0435, \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0441\u043a\u0440\u044b\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b \u0414\u041d\u041a \u0432 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u0438 \u0441\u0436\u0430\u0442\u0438\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u043d\u0443\u043a\u043b\u0435\u043e\u0442\u0438\u0434\u043d\u044b\u0445 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u0445. \u041d\u0430\u0443\u0447\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430, \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d\u043d\u0430\u044f \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043d\u0435\u043e\u0431\u044b\u0447\u043d\u043e\u043c\u0443 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044e, \u0431\u044b\u043b\u0430 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u0430 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435 Science 3 \u043c\u0430\u0440\u0442\u0430 2017 \u0433\u043e\u0434\u0430.\r\n\r\n\u0414\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430 \u043f\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0414\u041d\u041a \u042f\u043d\u0438\u0432 \u042d\u0440\u043b\u0438\u0445 \u0438 \u0435\u0433\u043e \u043a\u043e\u043b\u043b\u0435\u0433\u0430 \u0414\u0438\u043d\u0430 \u0417\u0435\u043b\u0438\u043d\u0441\u043a\u0438 \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u0448\u0435\u0441\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\u2013 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 KolibriOS, \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u0441\u043a\u0438\u0439 \u0444\u0438\u043b\u044c\u043c 1896 \u0433\u043e\u0434\u0430 \u00ab\u041f\u0440\u0438\u0431\u044b\u0442\u0438\u0435 \u043f\u043e\u0435\u0437\u0434\u0430 \u043d\u0430 \u0432\u043e\u043a\u0437\u0430\u043b \u041b\u0430-\u0421\u044c\u043e\u0442\u0430\u00bb, \u043a\u043e\u0434 50-\u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432\u043e\u0439 \u043f\u043e\u0434\u0430\u0440\u043e\u0447\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u044b Amazon, \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0439 \u0432\u0438\u0440\u0443\u0441, \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043b\u0430\u0441\u0442\u0438\u043d\u043e\u043a \u00ab\u041f\u0438\u043e\u043d\u0435\u0440\u0430\u00bb \u0438 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u041a\u043b\u043e\u0434\u0430 \u0428\u0435\u043d\u043d\u043e\u043d\u0430 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0442\u0435\u043e\u0440\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 1948 \u0433\u043e\u0434\u0430.\r\n\r\n\u0423\u0447\u0435\u043d\u044b\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0431\u0440\u0430\u043b\u0438 \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0432 \u043a\u0443\u0447\u0443, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0434\u0435\u043b\u0438\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u043e\u043d\u0442\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432, \u043e\u043d\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u00ab\u043a\u0430\u043f\u043b\u0438\u00bb \u0444\u043e\u043d\u0442\u0430\u043d\u0430 \u2013 \u0431\u043b\u043e\u043a\u0438 \u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u044f 00, 01, 10, 11 \u0432 \u0447\u0435\u0442\u044b\u0440\u0435 \u043d\u0443\u043a\u043b\u0435\u043e\u0442\u0438\u0434\u043d\u044b\u0445 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0430\u0434\u0435\u043d\u0438\u043d (\u0410), \u0446\u0438\u0442\u043e\u0437\u0438\u043d (\u0421), \u0433\u0443\u0430\u043d\u0438\u043d (G) \u0438 \u0442\u0438\u043c\u0438\u043d (\u0422). \u0427\u0442\u043e\u0431\u044b \u0437\u0430\u0442\u0435\u043c \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u044d\u0442\u0438 \u0431\u043b\u043e\u043a\u0438 \u0432\u043e\u0435\u0434\u0438\u043d\u043e, \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0447\u0435\u043d\u044b\u0445 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u043c\u0435\u0442\u043a\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u00ab\u043a\u0430\u043f\u043b\u0438\u00bb. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0443\u0447\u0435\u043d\u044b\u043c\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u00ab\u0444\u043e\u043d\u0442\u0430\u043d \u0414\u041d\u041a\u00bb.\r\n\r\n\u0412\u0441\u0435\u0433\u043e \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043e\u043a\u043e\u043b\u043e 72 \u0442\u044b\u0441\u044f\u0447 \u0442\u0430\u043a\u0438\u0445 \u0446\u0435\u043f\u043e\u0447\u0435\u043a \u0414\u041d\u041a, \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043b\u0430 \u0432 \u0441\u0435\u0431\u0435 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e 200 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0439. \u042d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u043d\u0438 \u0441\u043e\u0431\u0440\u0430\u043b\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u0435\u0433\u043e \u0432 \u0421\u0430\u043d-\u0424\u0440\u0430\u043d\u0446\u0438\u0441\u043a\u043e, \u0433\u0434\u0435 \u0441\u0442\u0430\u0440\u0442\u0430\u043f Twist Bioscience, \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0441\u0438\u043d\u0442\u0435\u0437\u043e\u043c \u0414\u041d\u041a, \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043b \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0438\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435. \u0414\u0432\u0435 \u043d\u0435\u0434\u0435\u043b\u0438 \u0441\u043f\u0443\u0441\u0442\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u042d\u0440\u043b\u0438\u0445\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430 \u043f\u0440\u043e\u0431\u0438\u0440\u043a\u0443 \u0441 \u043c\u043e\u043b\u0435\u043a\u0443\u043b\u0430\u043c\u0438 \u0414\u041d\u041a.\r\n\r\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0441\u0435\u043a\u0432\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u043d\u0438\u0442\u0435\u0439 \u0414\u041d\u041a \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u041f\u041e \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0433\u0435\u043d\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u044b\u0439 \u0444\u0430\u0439\u043b, \u043e\u043d\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438 \u0444\u0430\u0439\u043b\u044b. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c, \u0443\u0447\u0435\u043d\u044b\u0435 \u043d\u0435 \u0443\u0442\u043e\u0447\u043d\u044f\u044e\u0442.",
      "user": 3
    }
  },
  {
    "model": "blog.post",
    "pk": 5,
    "fields": {
      "timestamp": "2017-03-07T14:01:14.625Z",
      "title": "SMTP backend",
      "content": "class backends.smtp.EmailBackend(host=None, port=None, username=None, password=None, use_tls=None, fail_silently=False, use_ssl=None, timeout=None, ssl_keyfile=None, ssl_certfile=None, **kwargs)",
      "user": 1
    }
  },
  {
    "model": "blog.post",
    "pk": 6,
    "fields": {
      "timestamp": "2017-03-07T14:03:09.719Z",
      "title": "The fail_silently argument controls how the backend should ha",
      "content": "go ships with several email sending backends. With the exception of the SMTP backend (which is the default), these backends are only useful during testing and development. If you have special email sending requirements, you can write your own email backend.",
      "user": 1
    }
  },
  {
    "model": "blog.post",
    "pk": 7,
    "fields": {
      "timestamp": "2017-03-07T14:08:10.517Z",
      "title": "Returns all Entry objects related to Blog.",
      "content": ">>> b = Blog.objects.get(id=1)\r\n>>> b.entries.all() # Returns all Entry objects related to Blog.\r\n\r\n# b.entries is a Manager that returns QuerySets.\r\n>>> b.entries.filter(headline__contains='Lennon')\r\n>>> b.entries.count()\r\n\r\nUsing a custom reverse manager\u00b6\r\n\r\nBy default the RelatedManager used for reverse relations is a subclass of the default manager for that model. If you would like to specify a different manager for a given query you can use the following syntax:\r\n\r\nfrom django.db import models\r\n\r\nclass Entry(models.Model):\r\n    #...\r\n    objects = models.Manager()  # Default Manager\r\n    entries = EntryManager()    # Custom Manager\r\n\r\nb = Blog.objects.get(id=1)\r\nb.entry_set(manager='entries').all()\r\n\r\nIf EntryManager performed default filtering in its get_queryset() method, that filtering would apply to the all() call.\r\n\r\nOf course, specifying a custom reverse manager also enables you to call its custom methods:\r\n\r\nb.entry_set(manager='entries').is_published()\r\n\r\nAdditional methods to handle related objects\u00b6\r\n\r\nIn addition to the QuerySet methods defined in \u201cRetrieving objects\u201d above, the ForeignKey Manager has additional methods used to handle the set of related objects. A synopsis of each is below, and complete details can be found in the related objects reference.\r\n\r\nadd(obj1, obj2, ...)\r\n    Adds the specified model objects to the related object set.\r\ncreate(**kwargs)\r\n    Creates a new object, saves it and puts it in the related object set. Returns the newly created object.\r\nremove(obj1, obj2, ...)\r\n    Removes the specified model objects from the related object set.\r\nclear()\r\n    Removes all objects from the related object set.\r\nset(objs)\r\n    Replace the set of related objects.\r\n\r\nTo assign the members of a related set, use the set() method with an iterable of object instances or a list of primary key values. For example:\r\n\r\nb = Blog.objects.get(id=1)\r\nb.entry_set.set([e1, e2])\r\n\r\nIn this example, e1 and e2 can be full Entry instances, or integer primary key values.\r\n\r\nIf the clear() method is available, any pre-existing objects will be removed from the entry_set before all objects in the iterable (in this case, a list) are added to the set. If the clear() method is not available, all objects in the iterable will be added without removing any existing elements.\r\n\r\nEach \u201creverse\u201d operation described in this section has an immediate effect on the database. Every addition, creation and deletion is immediately and automatically saved to the database.\r\nMany-to-many relationships\u00b6\r\n\r\nBoth ends of a many-to-many relationship get automatic API access to the other end. The API works just as a \u201cbackward\u201d one-to-many relationship, above.\r\n\r\nThe only difference is in the attribute naming: The model that defines the ManyToManyField uses the attribute name of that field itself, whereas the \u201creverse\u201d model uses the lowercased model name of the original model, plus '_set' (just like reverse one-to-many relationships).\r\n\r\nAn example makes this easier to understand:\r\n\r\ne = Entry.objects.get(id=3)\r\ne.authors.all() # Returns all Author objects for this Entry.\r\ne.authors.count()\r\ne.authors.filter(name__contains='John')\r\n\r\na = Author.objects.get(id=5)\r\na.entry_set.all() # Returns all Entry objects for this Author.\r\n\r\nLike ForeignKey, ManyToManyField can specify related_name. In the above example, if the ManyToManyField in Entry had specified related_name='entries', then each Author instance would have an entries attribute instead of entry_set.\r\nOne-to-one relationships\u00b6\r\n\r\nOne-to-one relationships are very similar to many-to-one relationships. If you define a OneToOneField on your model, instances of that model will have access to the related object via a simple attribute of the model.\r\n\r\nFor example:\r\n\r\nclass EntryDetail(models.Model):\r\n    entry = models.OneToOneField(Entry, on_delete=models.CASCADE)\r\n    details = models.TextField()\r\n\r\ned = EntryDetail.objects.get(id=2)\r\ned.entry # Returns the related Entry object.\r\n\r\nThe difference comes in \u201creverse\u201d queries. The related model in a one-to-one relationship also has access to a Manager object, but that Manager represents a single object, rather than a collection of objects:\r\n\r\ne = Entry.objects.get(id=2)\r\ne.entrydetail # returns the related EntryDetail object\r\n\r\nIf no object has been assigned to this relationship, Django will raise a DoesNotExist exception.\r\n\r\nInstances can be assigned to the reverse relationship in the same way as you would assign the forward relationship:\r\n\r\ne.entrydetail = ed\r\n\r\nHow are the backward relationships possible?\u00b6\r\n\r\nOther object-relational mappers require you to define relationships on both sides. The Django developers believe this is a violation of the DRY (Don\u2019t Repeat Yourself) principle, so Django only requires you to define the relationship on one end.\r\n\r\nBut how is this possible, given that a model class doesn\u2019t know which other model classes are related to it until those other model classes are loaded?\r\n\r\nThe answer lies in the app registry. When Django starts, it imports each application listed in INSTALLED_APPS, and then the models module inside each application. Whenever a new model class is created, Django adds backward-relationships to any related models. If the related models haven\u2019t been imported yet, Django keeps tracks of the relationships and adds them when the related models eventually are imported.\r\n\r\nFor this reason, it\u2019s particularly important that all the models you\u2019re using be defined in applications listed in INSTALLED_APPS. Otherwise, backwards relations may not work properly.\r\nQueries over related objects\u00b6\r\n\r\nQueries involving related objects follow the same rules as queries involving normal value fields. When specifying the value for a query to match, you may use either an object instance itself, or the primary key value for the object.\r\n\r\nFor example, if you have a Blog object b with id=5, the following three queries would be identical:\r\n\r\nEntry.objects.filter(blog=b) # Query using object instance\r\nEntry.objects.filter(blog=b.id) # Query using id from instance\r\nEntry.objects.filter(blog=5) # Query using id directly\r\n\r\nFalling back to raw SQL\u00b6\r\n\r\nIf you find yourself needing to write an SQL query that is too complex for Django\u2019s database-mapper to handle, you can fall back on writing SQL by hand. Django has a couple of options for writing raw SQL queries; see Performing raw SQL queries.\r\n\r\nFinally, it\u2019s important to note that the Django database layer is merely an interface to your database. You can access your database via other tools, programming languages or database frameworks; there\u2019s nothing Django-specific about your database.\r\nModels\r\nAggregation\r\nAdditional Information\r\nSearch:\r\nSupport Django!\r\nSupport Django!\r\n\r\n    GS donated to the Django Software Foundation to support Django development. Donate today!\r\n\r\nContents\r\n\r\n    Making queries\r\n        Creating objects\r\n        Saving changes to objects\r\n            Saving ForeignKey and ManyToManyField fields\r\n        Retrieving objects\r\n            Retrieving all objects\r\n            Retrieving specific objects with filters\r\n                Chaining filters\r\n                Filtered QuerySets are unique\r\n                QuerySets are lazy\r\n            Retrieving a single object with get()\r\n            Other QuerySet methods\r\n            Limiting QuerySets\r\n            Field lookups\r\n            Lookups that span relationships\r\n                Spanning multi-valued relationships\r\n            Filters can reference fields on the model\r\n            The pk lookup shortcut\r\n            Escaping percent signs and underscores in LIKE statements\r\n            Caching and QuerySets\r\n                When QuerySets are not cached\r\n        Complex lookups with Q objects\r\n        Comparing objects\r\n        Deleting objects\r\n        Copying model instances\r\n        Updating multiple objects at once\r\n        Related objects\r\n            One-to-many relationships\r\n                Forward\r\n                Following relationships \u201cbackward\u201d\r\n                Using a custom reverse manager\r\n                Additional methods to handle related objects\r\n            Many-to-many relationships\r\n            One-to-one relationships\r\n            How are the backward relationships possible?\r\n            Queries over related objects\r\n        Falling back to raw SQL\r\n\r\nBrowse\r\n\r\n    Prev: Models\r\n    Next: Aggregation\r\n    Table of contents\r\n    General Index\r\n    Python Module Index\r\n\r\nYou are here:\r\n\r\n    Django dev documentation\r\n        Using Django\r\n            Models and databases\r\n                Making queries\r\n\r\nGetting help\r\n\r\nFAQ\r\n    Try the FAQ \u2014 it's got answers to many common questions.\r\nIndex, Module Index, or Table of Contents\r\n    Handy when looking for specific information.\r\ndjango-users mailing list\r\n    Search for information in the archives of the django-users mailing list, or post a question.\r\n#django IRC channel\r\n    Ask a question in the #django IRC channel, or search the IRC logs to see if it\u2019s been asked before.\r\nTicket tracker\r\n    Report bugs with Django or Django documentation in our ticket tracker.\r\n\r\nDownload:\r\n\r\nOffline (development version): HTML | PDF | ePub\r\nProvided by Read the Docs.",
      "user": 1
    }
  },
  {
    "model": "blog.post",
    "pk": 8,
    "fields": {
      "timestamp": "2017-03-07T14:13:15.515Z",
      "title": "\u041a\u0432\u0430\u043d\u0442\u043e\u0432\u044b\u0435 \u0442\u043e\u0447\u043a\u0438: \u0416\u041a-\u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f \u043e\u0431\u0440\u0435\u0442\u0430\u0435\u0442 \u043d\u043e\u0432\u043e\u0435 \u0434\u044b\u0445\u0430\u043d\u0438\u0435",
      "content": "\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435 \u0442\u0435\u043b\u0435\u0432\u0438\u0437\u043e\u0440\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u0446\u0432\u0435\u0442\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a, \u043f\u043e \u0442\u0440\u0438 \u043d\u0430 \u043f\u0438\u043a\u0441\u0435\u043b \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438. \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044e \u043d\u0430 \u0431\u0430\u0437\u0435 \u0436\u0438\u0434\u043a\u0438\u0445 \u043a\u0440\u0438\u0441\u0442\u0430\u043b\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435\u2026",
      "user": 3
    }
  },
  {
    "model": "blog.post",
    "pk": 9,
    "fields": {
      "timestamp": "2017-03-07T14:14:38.111Z",
      "title": "\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0447\u0438\u043a Google \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439 \u0432\u044b\u0443\u0447\u0438\u043b \u0440\u0443\u0441\u0441\u043a\u0438\u0439",
      "content": "\u041a\u043e\u043c\u043f\u0430\u043d\u0438\u044f Google \u0431\u0435\u0437 \u043b\u0438\u0448\u043d\u0435\u0439 \u043f\u043e\u043c\u043f\u044b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430\u0434 \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 Google Translate, \u0441\u043b\u0435\u0434\u0443\u044f \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043c\u0435\u0447\u0435\u043d\u043d\u043e\u0439 \u0446\u0435\u043b\u0438 \u2013 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b \u0431\u043e\u043b\u0435\u0435 \u0436\u0438\u0432\u044b\u043c\u0438 \u0438 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438,",
      "user": 3
    }
  },
  {
    "model": "blog.post",
    "pk": 10,
    "fields": {
      "timestamp": "2017-03-07T14:18:16.809Z",
      "title": "One account. All of Google.",
      "content": "Sign in to continue to Gmail",
      "user": 3
    }
  },
  {
    "model": "blog.subscription",
    "pk": 3,
    "fields": {
      "subject": 3,
      "subscriber": 1
    }
  },
  {
    "model": "blog.subscription",
    "pk": 4,
    "fields": {
      "subject": 1,
      "subscriber": 3
    }
  },
  {
    "model": "blog.userblogdata",
    "pk": 1,
    "fields": {
      "user": 1,
      "read_posts": [
        4,
        3
      ]
    }
  },
  {
    "model": "blog.userblogdata",
    "pk": 2,
    "fields": {
      "user": 2,
      "read_posts": []
    }
  },
  {
    "model": "blog.userblogdata",
    "pk": 3,
    "fields": {
      "user": 3,
      "read_posts": []
    }
  }
]